{"version":3,"sources":["components/Tootltip/index.js","components/Avatar/index.js","constants.js","components/Message/index.js","components/ChatCard/index.js","components/ChatCard/placeholder.js","utils/fetchData.js","utils/getChatData.js","App.js","serviceWorker.js","index.js"],"names":["props","text","className","imgSrc","tooltipText","finalImgUrl","src","alt","loading","message","time","userName","dayjs","format","avatar","email","timestamp","fullName","getData","config","host","path","method","queryParams","proxyHeaders","body","JSON","stringify","url","Object","keys","length","encodeQueryParams","obj","str","key","hasOwnProperty","val","undefined","push","encodeURIComponent","join","fetchData","credentials","headers","fetch","then","response","ok","json","Error","statusText","status","getChatData","successCb","failureCb","memberPromise","window","location","href","messagesPromise","Promise","all","results","members","messages","memberObj","resultArr","constructor","Array","forEach","element","id","map","item","memberInfo","userId","messageId","firstName","lastName","getDisplayableChatMessages","data","catch","err","App","state","chatData","error","isFetching","setState","this","Component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fe8c4d78.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.css\";\n\nexport default (props) => {\n  const { text } = props;\n  if (!text) {\n    return null;\n  }\n  return <div className=\"tooltip\">{text}</div>;\n};\n","import React, { memo } from \"react\";\nimport { PLACEHOLDER_AVATAR } from \"../../constants\";\nimport Tooltip from \"../Tootltip\";\nimport \"./index.css\";\n\nexport default (props) => {\n  const { imgSrc, tooltipText } = props;\n  let finalImgUrl = imgSrc;\n  if (!imgSrc) {\n    finalImgUrl = PLACEHOLDER_AVATAR;\n  }\n  return (\n    <div className=\"imgWrapper\">\n      <img className=\"imgClass\" src={finalImgUrl} alt=\"Avatar\" loading=\"lazy\" />\n      <Tooltip text={tooltipText} />\n    </div>\n  );\n};\n","export const PLACEHOLDER_AVATAR =\n  \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSxfRU55yMsbgdDn_rpmnqf60WKvo157flOJxTdO3NkqG0guXn4&usqp=CAU\";\n","import React from \"react\";\nimport dayjs from \"dayjs\";\nimport \"./index.css\";\n\nexport default (props) => {\n  const { message, time, userName } = props;\n  if (!message) {\n    return null;\n  }\n  return (\n    <div className=\"messageWrapper\">\n      {(userName && <div className=\"userClass\">{userName} </div>) || null}\n      <div className=\"message\">{message}</div>\n      {(time && (\n        <div className=\"timeClass\">{dayjs(time).format(\"DD/MM/YYYY\")}</div>\n      )) ||\n        null}\n    </div>\n  );\n};\n","import React from \"react\";\nimport Avatar from \"../Avatar\";\nimport Message from \"../Message\";\nimport \"./index.css\";\n\nexport default (props) => {\n  const { avatar, email, message, timestamp, fullName } = props;\n  return (\n    <div className=\"chatCard\">\n      <Avatar imgSrc={avatar} tooltipText={email} />\n      <Message message={message} time={timestamp} userName={fullName} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./index.css\";\n\nexport default (props) => {\n  return (\n    <div className=\"chatCard\">\n      <div className=\"imgPlaceholder\"></div>\n      <div className=\"msgPlaceholder\"></div>\n    </div>\n  );\n};\n","export function encodeQueryParams(obj) {\n  if (!obj || Object.keys(obj).length === 0) {\n    return \"\";\n  }\n  const str = [];\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      const val = obj[key];\n      if (val == undefined) {\n        continue;\n      }\n      str.push(\n        val !== null && typeof val === \"object\"\n          ? encodeQueryParams(val)\n          : `${encodeURIComponent(key)}=${encodeURIComponent(val)}`\n      );\n    }\n  }\n  return str.join(\"&\");\n}\n\nexport function getData(config) {\n  const {\n    host = \"\",\n    path = \"\",\n    method,\n    queryParams = {},\n    proxyHeaders = {},\n  } = config;\n  const body =\n    method === \"POST\" || (method === \"PATCH\" && config.body)\n      ? JSON.stringify(config.body)\n      : null;\n\n  // get query string from query params\n  let url = host + path;\n  // if we have a query string, append it to host to get desired url\n  if (Object.keys(queryParams).length) {\n    url = `${url}?${encodeQueryParams(queryParams)}`;\n  }\n  const fetchData = {\n    method,\n    body,\n    credentials: \"include\",\n    headers: { \"Content-Type\": \"application/json\", ...proxyHeaders },\n  };\n\n  return fetch(url, fetchData).then((response) => {\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`${response.statusText} ${response.status}`);\n  });\n}\n","import { getData } from \"./fetchData\";\n\nexport function getChatData({ successCb, failureCb }) {\n  const memberPromise = getData({\n    host: window.location.href,\n    path: \"members\",\n    method: \"GET\",\n  });\n  const messagesPromise = getData({\n    host: window.location.href,\n    path: \"message\",\n    method: \"GET\",\n  });\n  Promise.all([memberPromise, messagesPromise])\n    .then((results) => {\n      const [members, messages] = results;\n      successCb(getDisplayableChatMessages(members.data, messages.data));\n    })\n    .catch((err) => {\n      failureCb({ message: \"unable to get chat messages\" });\n    });\n}\n\nfunction getDisplayableChatMessages(members, messages) {\n  const memberObj = {};\n  let resultArr = [];\n  if (members.constructor === Array && members.length) {\n    members.forEach((element) => {\n      memberObj[element.id] = element;\n    });\n  }\n  if (messages.constructor === Array && messages.length) {\n    resultArr = messages.map((item) => {\n      const memberInfo = memberObj[item.userId];\n      if (memberInfo) {\n        return {\n          userId: item.userId,\n          messageId: item.id,\n          fullName: memberInfo.firstName + \" \" + memberInfo.lastName,\n          email: memberInfo.email,\n          message: item.message,\n          avatar: memberInfo.avatar,\n          timestamp: item.timestamp,\n        };\n      }\n    });\n  }\n  return resultArr;\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ChatCard from \"./components/ChatCard\";\nimport Placeholder from \"./components/ChatCard/placeholder\";\nimport { getChatData } from \"./utils/getChatData\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chatData: {\n        data: [],\n        error: null,\n        isFetching: true,\n      },\n    };\n  }\n\n  componentDidMount() {\n    getChatData({\n      successCb: (data) => {\n        this.setState({ chatData: { data, err: null, isFetching: false } });\n      },\n      failureCb: (error) => {\n        this.setState({ chatData: { data: [], error, isFetching: false } });\n      },\n    });\n  }\n  render() {\n    const {\n      chatData: { data, isFetching, error },\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"header\">ChatLog</header>\n        <div className=\"wrapper\">\n          {(!isFetching &&\n            data.length &&\n            data.map((item) => <ChatCard {...item} key={item.messageId} />)) ||\n            [1, 2, 3, 4, 5].map(() => <Placeholder />)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}